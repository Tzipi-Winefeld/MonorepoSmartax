# # שלב 1: התקנת התלויות ובניית הקוד של NestJS
# FROM node:18-alpine AS builder
# WORKDIR /app
# # העתקת קבצי הקונפיגורציה והחבילות
# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server
# # התקנת התלויות
# RUN npm install
# # ניקוי מטמון Nx
# RUN npx nx reset
# # בניית הקוד של NestJS
# RUN npx nx build server --prod --verbose
# # שלב 2: הפעלת היישום
# FROM node:18-alpine
# WORKDIR /app
# # התקנת nx גלובלית
# RUN npm install -g @nrwl/cli
# # התקנת @nrwl/workspace (אם נדרש)
# RUN npm install @nrwl/workspace --legacy-peer-deps
# # העתקת התוצרים מהשלב הקודם
# COPY --from=builder /app/server/dist /app/dist
# # העתקת החבילות הנדרשות לפרודקשן בלבד
# COPY package*.json ./
# RUN npm install --only=production
# # הפעלת היישום
# CMD ["node", "dist/main.js"]
# 2
# # שלב 1: בניית הקוד
# FROM node:18-alpine AS builder

# WORKDIR /app

# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server

# RUN npm install
# RUN npx nx reset
# RUN npx nx build server --prod --verbose

# # שלב 2: הפעלת היישום
# FROM node:18-alpine

# WORKDIR /app

# COPY --from=builder /app/dist/apps/server ./

# CMD ["node", "main.js"]
# 3
# # Step 1: Installing the dependencies and building the NestJS code
# FROM node:18-alpine AS builder
# WORKDIR /app
# # Copying the configuration files and packages
# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server
# # Copy ESLint configuration files
# COPY .eslintrc.json ./
# COPY apps/front/.eslintrc.json ./apps/front/.eslintrc.json
# COPY server/.eslintrc.json ./server/.eslintrc.json
# COPY .eslintignore ./
# # Install the dependencies
# RUN npm install
# # Clear Nx cache
# RUN npx nx reset
# # Building the NestJS code
# RUN npx nx build server --prod --verbose
# # Check if /app/dist exists after building for debugging
# RUN ls -la /app/dist
# # Step 2: Launching the application
# FROM node:18-alpine
# WORKDIR /app
# # Global nx installation
# RUN npm install -g @nrwl/cli
# # Install @nrwl/workspace (if required)
# RUN npm install @nrwl/workspace --legacy-peer-deps
# # Copying the products from the previous step
# COPY --from=builder /app/dist /app/dist 
# # Copy the packages required for production only
# COPY package*.json ./
# RUN npm install --only=production
# # Copy the environment file
# COPY .env ./
# COPY service-account.json ./
# # Starting the application
# CMD ["node", "dist/server/main.js"]  # Updated path to main.js
# 4
# Step 1: Installing the dependencies and building the NestJS code
# FROM node:18-alpine AS builder
# WORKDIR /app

# # Copying the configuration files and packages
# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server

# # Copy ESLint configuration files
# COPY .eslintrc.json ./
# COPY apps/front/.eslintrc.json ./apps/front/.eslintrc.json
# COPY server/.eslintrc.json ./server/.eslintrc.json
# COPY .eslintignore ./

# # Install the dependencies
# RUN npm install

# # Clear Nx cache
# RUN npx nx reset

# # Building the NestJS code
# RUN npx nx build server --prod --verbose

# # Apply modification to base-exception-filter-context.js
# RUN sed -i 's/instance.catch.bind(instance)/instance.catch && instance.catch.bind(instance)/g' /app/node_modules/@nestjs/core/exceptions/base-exception-filter-context.js

# # Check if /app/dist exists after building for debugging
# RUN ls -la /app/dist

# # Step 2: Launching the application
# FROM node:18-alpine
# WORKDIR /app

# # Global nx installation
# RUN npm install -g @nrwl/cli

# # Install @nrwl/workspace (if required)
# RUN npm install @nrwl/workspace --legacy-peer-deps

# # Copying the products from the previous step
# COPY --from=builder /app/dist /app/dist 

# # Copy the packages required for production only
# COPY package*.json ./
# RUN npm install --only=production

# # Copy the environment file
# COPY .env ./
# COPY service-account.json ./

# # Starting the application
# CMD ["node", "dist/server/main.js"]  # Updated path to main.js
# 5
# Step 1: Installing the dependencies and building the NestJS code
# FROM node:18-alpine AS builder
# WORKDIR /app

# # Copying the configuration files and packages
# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server

# # Copy ESLint configuration files
# COPY .eslintrc.json ./
# COPY apps/front/.eslintrc.json ./apps/front/.eslintrc.json
# COPY server/.eslintrc.json ./server/.eslintrc.json
# COPY .eslintignore ./

# # Install the dependencies
# RUN npm install

# # Clear Nx cache
# RUN npx nx reset

# # Apply modification to base-exception-filter-context.js
# RUN sed -i 's/instance.catch.bind(instance)/instance.catch ? instance.catch.bind(instance) : undefined/g' /app/node_modules/@nestjs/core/exceptions/base-exception-filter-context.js

# # Building the NestJS code
# RUN npx nx build server --prod --verbose

# # Check if /app/dist exists after building for debugging
# RUN ls -la /app/dist

# # Step 2: Launching the application
# FROM node:18-alpine
# WORKDIR /app

# # Global nx installation
# RUN npm install -g @nrwl/cli

# # Install @nrwl/workspace (if required)
# RUN npm install @nrwl/workspace --legacy-peer-deps

# # Copying the products from the previous step
# COPY --from=builder /app/dist /app/dist 

# # Copy the packages required for production only
# COPY package*.json ./
# RUN npm install --only=production

# # Copy the environment file
# COPY .env ./
# COPY service-account.json ./

# # Starting the application
# CMD ["node", "dist/server/main.js"]

#6
# # Step 1: Build the NestJS code
# FROM node:18-alpine AS builder
# WORKDIR /app

# # Copying the configuration files and packages
# COPY nx.json tsconfig.base.json package*.json ./
# COPY apps ./apps
# COPY server ./server
# COPY .eslintrc.json .eslintignore ./
# COPY apps/front/.eslintrc.json ./apps/front/.eslintrc.json
# COPY server/.eslintrc.json ./server/.eslintrc.json

# # Install the dependencies
# RUN npm install && npm cache clean --force

# # Clear Nx cache
# RUN npx nx reset

# # Apply modification to base-exception-filter-context.js
# RUN sed -i 's/instance.catch.bind(instance)/instance.catch ? instance.catch.bind(instance) : undefined/g' /app/node_modules/@nestjs/core/exceptions/base-exception-filter-context.js

# # Building the NestJS code
# RUN npx nx build server --prod --verbose

# # Step 2: Launch the application
# FROM node:18-alpine
# WORKDIR /app

# # Install global nx CLI and production dependencies
# RUN npm install -g @nrwl/cli

# # Copying the build artifacts and production dependencies
# COPY --from=builder /app/dist /app/dist
# COPY package*.json ./
# RUN npm install --only=production && npm cache clean --force

# # Copy the environment file
# COPY .env ./
# COPY service-account.json ./

# # Starting the application
# CMD ["node", "dist/server/main.js"]
# 7
# Step 1: Build the NestJS code
FROM node:18-alpine AS builder
WORKDIR /app

# Copying the configuration files and packages
COPY nx.json tsconfig.base.json package*.json ./
COPY apps ./apps
COPY server ./server
COPY .eslintrc.json .eslintignore ./
COPY apps/front/.eslintrc.json ./apps/front/.eslintrc.json
COPY server/.eslintrc.json ./server/.eslintrc.json

# Install the dependencies
RUN npm install --legacy-peer-deps && npm cache clean --force

# Clear Nx cache
RUN npx nx reset

# Apply modification to base-exception-filter-context.js
RUN sed -i 's/instance.catch.bind(instance)/instance.catch ? instance.catch.bind(instance) : undefined/g' /app/node_modules/@nestjs/core/exceptions/base-exception-filter-context.js

# Building the NestJS code
RUN npx nx build server --prod --verbose

# Step 2: Launch the application
FROM node:18-alpine
WORKDIR /app

# התקנת Python וכלים נוספים שנדרשים ל-node-gyp
RUN apk add --no-cache python3 make g++



# Install global nx CLI and production dependencies
RUN npm install -g @nrwl/cli

# Copying the build artifacts and production dependencies
COPY --from=builder /app/dist /app/dist
COPY package*.json ./
RUN npm install --only=production --legacy-peer-deps && npm cache clean --force

# Copy the environment file
COPY .env ./
COPY service-account.json ./

# Starting the application
CMD ["node", "dist/server/main.js"]


